// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  cpf          String   @unique
  password     String
  whatsapp     String
  pixKey       String   @map("pix_key")
  uniqueCode   String?  @unique @map("unique_code")
  city         String
  state        String
  evoServerUrl String?  @map("evo_server_url")
  evoInstance  String?  @map("evo_instance")
  evoApiKey    String?  @map("evo_api_key")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  subscriptionStatus   SubscriptionStatus @default(FREE_TRIAL) @map("subscription_status")
  subscriptionDueDate  DateTime?          @map("subscription_due_date")
  trialEndsAt          DateTime?          @map("trial_ends_at")
  abacatepayCustomerId String?            @unique @map("abacatepay_customer_id")
  abacatepayBillingId  String?            @unique @map("abacatepay_billing_id")

  accounts      Account[]
  clients       Client[]
  loans         Loan[]
  Conversation  Conversation[]
  RecipeRequest RecipeRequest[]

  @@map("users")
}

enum SubscriptionStatus {
  FREE_TRIAL
  ACTIVE
  OVERDUE
  INACTIVE
}

model Account {
  id            String        @id @default(uuid())
  userId        String        @map("user_id")
  user          User          @relation(fields: [userId], references: [id])
  name          String
  balance       Decimal       @default(0) @db.Decimal(15, 2)
  profit        Decimal       @default(0) @db.Decimal(15, 2)
  pixAssociated String        @map("pix_associated")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  transactions  Transaction[]

  @@map("accounts")
}

model Transaction {
  id          String          @id @default(uuid())
  accountId   String          @map("account_id")
  account     Account         @relation(fields: [accountId], references: [id])
  title       String
  value       Decimal         @db.Decimal(15, 2)
  type        TransactionType
  description String?
  category    String
  date        DateTime
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  @@map("transactions")
}

enum TransactionType {
  Entrada
  Saída
  Transferencia
}

model Client {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id])
  name         String
  cpf          String?  @unique
  whatsapp     String
  address      String
  photoUrl     String?  @map("photo_url")
  city         String
  state        String
  observations String?
  totalLoaned  Decimal  @default(0) @map("total_loaned") @db.Decimal(15, 2)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  loans        Loan[]

  @@map("clients")
}

model Loan {
  id                   String           @id @default(uuid())
  userId               String           @map("user_id")
  user                 User             @relation(fields: [userId], references: [id])
  clientId             String           @map("client_id")
  client               Client           @relation(fields: [clientId], references: [id])
  codeId               String           @unique @map("code_id")
  loanedValue          Decimal          @map("loaned_value") @db.Decimal(15, 2)
  interestRate         Decimal?         @db.Decimal(15, 2)
  title                String
  type                 LoanType
  status               LoanStatus
  installmentsQuantity Int              @map("installments_quantity")
  recurrencePeriod     RecurrencePeriod @map("recurrence_period")
  loanBalance          Decimal          @map("loan_balance") @db.Decimal(15, 2)
  originalDueValue     Decimal          @map("original_due_value") @db.Decimal(15, 2)
  dailyFineValue       Decimal?         @map("daily_fine_value") @db.Decimal(15, 2)
  loanDate             DateTime         @map("loan_date")
  description          String?
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  installments         Installment[]

  @@map("loans")
}

enum LoanType {
  PercentualDosJuros
  ValorDaParcela
  ApenasJuros
  JurosSimples
}

enum LoanStatus {
  Aberto
  Quitado
  Atrasado
  Cancelado
}

enum RecurrencePeriod {
  UmaUnicaVez
  Diario
  Semanal
  Quinzenal
  Mensal
}

model Installment {
  id               String            @id @default(uuid())
  loanId           String            @map("loan_id")
  loan             Loan              @relation(fields: [loanId], references: [id])
  codeId           String            @unique @map("code_id")
  dueValue         Decimal           @map("due_value") @db.Decimal(15, 2)
  originalDueValue Decimal?          @map("original_due_value") @db.Decimal(15, 2)
  paidValue        Decimal           @default(0) @map("paid_value") @db.Decimal(15, 2)
  status           InstallmentStatus
  dueDate          DateTime          @map("due_date")
  daysLate         Int?              @map("days_late")
  totalFine        Decimal?          @map("total_fine") @db.Decimal(15, 2)
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  @@map("installments")
}

enum InstallmentStatus {
  Pendente
  Pago
  Atrasado
}

model Message {
  id         String   @id @default(cuid())
  sender     String
  content    String
  fromMe     Boolean
  receivedAt DateTime @default(now())
  rawPayload Json
}

enum ConversationStatus {
  IDLE
  PENDING_CLIENT_NAME
  PENDING_CLIENT_CPF
  COMPLETED
  CANCELLED
}

model Conversation {
  id             String             @id @default(uuid())
  userId         String             @map("user_id")
  user           User               @relation(fields: [userId], references: [id])
  clientWhatsapp String             @map("client_whatsapp")
  status         ConversationStatus @default(IDLE)
  currentStep    String?            @map("current_step")
  dataCollected  Json?              @map("data_collected")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")

  @@map("conversations")
}

//Será removido futuramente

model RecipeRequest {
  id       String @id @default(uuid())
  status   String @default("PENDENTE") // PENDENTE, CONCLUIDO
  rawData  String // O texto completo que o paciente enviou
  jsonData Json? // O JSON estruturado extraído pela IA

  solicitadoPor String   @map("solicitado_por")
  solicitadoEm  DateTime @default(now()) @map("solicitado_em")

  // A relação com o usuário foi removida
  // userId String @map("user_id")
  // user   User   @relation(fields: [userId], references: [id])
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("recipe_requests")
}
